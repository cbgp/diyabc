\clearpage
 \section{Implementation details}
\subsection{Software design}
$DIYABC$ v2 has been designed in a very different way compared to version 1. Version 1 was a single executable file were the GUI \footnote{Graphic User Interface} and computation codes were highly intricated and both written in the same language (\emph{Delphi}). In version 2, the GUI and the computation codes have been completely separated. Actually, the GUI is a script written in \emph{python} and all computations are included in a program written in \emph{C++}. In opposition to \emph{Delphi} which is restricted to a single OS (\texttt{Windows}), \textit{python} and \textit{C++} can be used with the main three OS (\texttt{Linux}, \texttt{Mac} and \texttt{Windows}), allowing version 2  to be operated under all three OS.\\
The GUI uses the \textit{Qt} graphic library. The computation code is linked to the \textit{openmp} library allowing a better use of multicore/multiprocessor computers.\\
Communications between the GUI and the computation program are made through  
\subsection{Files}
The program uses and produces various files which we will describe now.
\subsubsection{data files}
Data files are text files that contain information about the samples : number and names of microsatellite markers, multilocus genotypes of individuals. The basic  format is that of the Genepop software \citep{RR1995} and data files produced by DIYABC are under this format.  \textbf{Microsatellite genotypes must be noted with 3 (haploid) or 6 (diploid) digits, these three digit numbers being the length in nucleotides of the corresponding PCR products}. In addition, we have added some features to this basic format in order e.g. to use sequence data. All these additions are explained at the end of section 3.1.\\ Although data file names have usually the extension \texttt{.txt}, any extension is accepted, including no extension at all. The next page shows an example of a data set saved in Genepop format.
\subsubsection{reference table files} 
Reference table files are binary files which include two successive parts.\\ The first part is a header which contains all necessary information concerning how simulations were performed : the scenario(s), the prior distribution of parameters, motif length and size ranges of loci, the chosen summary statistics. The header part ends with the names of parameters and summary statistics that will be computed in the simulations. The second part provides all simulation results.\\
As already mentionned, it is possible to visualize the content of the reference table by exporting (in full or just in part) the binary file to a text file (\texttt{Options} menu of the "run simulation" screen). The reference  text file is just an output file. It cannot be used to perform any computation with DIYABC.\\
When a reference table is created, a text file is also automatically created which corresponds to the header of the reference table. It is identical to the header of the exported reference text file and includes all information necessary to simulate the reference table file. This file has the extension \texttt{.reftableHeader}. \textbf{Most importantly, it can be used as an alternate template for building a new reference table.}  
\subsubsection{output files}
As already seen, DIYABC achieves different analyses : comparison of scenarios, estimation of posterior distribution of parameters, model checking,  computation of bias and mean square errors and evaluation of confidence in scenario choice. Each analysis has its own output which can be printed and saved. Graphs are saved under bitmap format (extension \texttt{.bmp}) and non-graphic output are saved in text files.\\
When estimating parameters or comparing scenarios, the program computes the summary statistics of the observed data set. These are automatically written to a text file the name of which concatenates the names of the data set and the reference table (both without extension) and is given the extension \texttt{.statobs}. For instance, the name of this file will be \texttt{gps\_001\_gps\_001.statobs} if the data file name is \texttt{gps\_001.txt} and the reference table is \texttt{gps\_001.reftable}.\\
 When estimating parameters, the file named \texttt{phistar.tmp} is also produced. When clicking on the \fbox{\textsf{Save phistar}}, this file is just copied to another file.\\
 When the bias/precision option is run with parameter values drawn from priors, two files  are automatically produced. The first file (named \texttt{bias\_precision.tmp}) contains all drawn values of parameters as well as the corresponding point estimates and the second file (named \texttt{bias\_precision\_phistar.tmp}) contains the samples from the posterior distributions of parameters used to compute these point estimates.\\
In addition, graphic representations of scenario(s) can also be printed and saved (in bitmap format).\\
Similarly, when the confidence in scenario choice option is run with parameter values drawn from priors, the file named \texttt{conf\_scenX.tmp} is automatically produced (where \texttt{X} is the number of the scenario chosen for this option). This file is identical to what is seen on the result screen, but it also includes the values of parameters of each test data set.\\
All graphic files have names imposed by the program (e.g.  \texttt{scenario\_1.bmp}),  thus it advised to rename or copy those that you want to keep for future use, as soon as possible. Saved graphic files can be modified using programs such as Gimp, Photoshop or Paint. 


\subsection{Missing data}
Missing or undetermined genotypes should be coded as \texttt{000} (haploid microsatellites, \texttt{000000}  (diploid microsatellites), \texttt{$<[]>$} (haploid sequences) or \texttt{$<[][]>$} (diploid sequences) in the data file. \\
Missing data are taken into account in the following way. For each appearance of a missing genotype in the observed data set, the programs records the individual and the locus. When simulating data sets, the program replaces the simulated genotype (obtained through the coalescence process algorithm) by the missing data code at all corresponding locations. All summary statistics are thus computed with the same missing data as for the observed data set. 

\subsection{data file}
Below are two examples of data set in Genepop format simulated by DIYABC.\\ In the first example, this data set includes two population samples, each of 12 diploid individuals (8 females and 4 males in the first sample and 5 females and 7 males in the second sample). As deduced from the letter between $<$ and $>$ on the locus name lines (see page 25), these individuals have been genotyped at 3 microsatellite loci (1 autosomal $<A>$, 1 X-linked $<X>$ and 1 Y-linked $<Y>$) and 3 DNA sequence loci (1 autosomal. 1 X-linked and 1 mitochondrial $<M>$). The species sex-ratio, given in the title line, is of three males for one female ($<NM=3NF>$) or in other words, the number of males equals three times the number of females. 
\begin{figure}[h]
\includegraphics[scale=0.7]{ss5png/screenga001.png}
\end{figure}

In the second example, the species is haploid. Individuals have been genotyped at three autosomal microsatellite loci and one mitochondrial DNA sequence locus. The species being haploid (deduced from the presence of autosomal haploid loci), no indication of the sex-ratio appears in the title line.

\begin{figure}[h]
\includegraphics[scale=0.7]{ss5png/screenga002.png}
\end{figure}



\clearpage
\section{Cluster version}
The process of simulating data sets is generally a time consuming part of the ABC approach. Typically, one to several millions  data sets are needed to build up a reference table and this process can last several hours to several days. For those  that can have access to a computer grid cluster, two additional programs are available. They both run under Linux. Source files are written in Delphi pascal and can be compiled with Free Pascal Compiler (http://www.freepascal.org/download.var) using the command line :\\
\texttt{>fpc -Sd -m Delphi <filename>}
  \begin{description}
  \item[\texttt{diyabc\_sim}] :\\
  This program simulates a given number of data sets according to the information given in a \texttt{reftableHeader} file. The simulated data sets are output in a \texttt{reftable} file. This program requires 3 parameters : the name of the reftableHeader file, a string that will be affixed to the name of the reftable file (to distinguish it from other reftable files) and the number of desired simulated data sets. This programs has two input files : the reftableHeader file and the data file. The data file must match the one written at the beginning of the reftableHeader file. The data file is just needed to evaluate sample sizes and number of loci as well as determining missing data. As an example, supposing a reftableHeader file named \texttt{mydataanalysis.reftableHeader}, a command such as :\\
  \texttt{>diyabc\_sim mydataanalysis 01 5000}\\
  will produce a reference table file named \texttt{mydataanalysis01.reftable}  containing 5,000 simulated data sets according to the observed data set and analysis summarized in   \texttt{mydataanalysis.reftableHeader}. 
  
  \item[\texttt{diyabc\_cat}]:\\
  This program pools all reftable files of a directory into a single reftable file. This programs requires 2 parameters : the name of the reftableHeader file used to generate all the reftable files to be pooled and the name of the output reftable. \texttt{diyabc\_cat} reads the reftableHeader file (which has to be in the same directory), scans all available reftable files present in the directory and select all those with a header that matches the reftableHeader file.  The selected files are then copied to a single reftable file. Following with the example above, a command such as :\\
  \texttt{>diyabc\_cat mydataanalysis mda}\\
  will pool all reftable files with header matching \texttt{mydataanalysis.reftableHeader} in an output file named \texttt{mda.reftable}. 
  \end{description}
  
  The cluster is just used to produce a reftable file ready to be analyzed by DIYABC. All treatments are thus performed (under Windows) with the DIYABC programs. A typical session will include :\\
  \begin{enumerate}
  \item Using DIYABC, input data file name, provide scenario(s), provide priors for historico-demographic and mutationnal parameters, provide motif lengths and ranges, select summary statistics, simulate a few datasets (in one wants to check that the ouput is OK, but this last step is not compulsary). 
  \item Transfer the reftableHeader file and the data file on the cluster and using \texttt{diyabc\_sim} and \texttt{diyabc\_cat} as explained above, create a large reftable file.
  \item Transfer the reftable file back to the Windows directory where the analysis began and rerun DIYABC to perform comparison of scenarios, estimation of parameters or computation of bias/precision as needed.  
  \end{enumerate}
  For those who have access to a cluster with Sun's Grid Engine software, they can use the following script to create multiple reference tables (see next page). However, this script will not exempt the user to  manually run \texttt{diyabc\_cat} to concatenate all reference tables in a single one. The script is run with the following four parameters :\\
  
  \texttt{>ScriptABC file.dat file.reftableHeader n\_jobs n\_iter\_per\_job}
\clearpage
\begin{figure}
\caption{Bash script that can be run with Sun Grid Engine software}
\includegraphics{ss5pdf/Script_SGE.pdf}
\end{figure}

\clearpage
\subsection{A note about the random number generator used in DIYABC}

The random number generator used in DIYABC is of the \emph{Multiply With Carry} type invented by G. Marsaglia (see http://en.wikipedia.org/wiki/Multiply-with-carry for detailed explanations and references; see also http://www.rlmueller.net/MWC32.htm for a more condensed description).\\
The major interests of this random generator are :
\begin{itemize}
\item  it is very simple to program 
\item it is also very fast
\item there is a large choice of random number sequences among which to choose
\item the period of each sequence is a simple function of two parameters that define the sequence
\end{itemize} 

Four parameters define a unique sequence of pseudo random numbers. They are called the \emph{modulo} ($M$), the \emph{multiply}($m$), the \emph{initial x} ($x_0$) and the \emph{initial carry} ($c_0$). Only the last two parameters change when drawing a number, according to the following equations : \\

$x_i$ =$ [(m * x_{i-1} + c_{i-1}] $ \textsf{modulo} $M$\\  

$c_i$ = $[(m * x_{i-1} + c_{i-1}]$  \textsf{div}\footnote{\textsf{div} is the integer division, i.e. the result ($c_i$) is the integer part of the ratio.} $M$\\

In DIYABC, we chose a 24-bit generator, meaning that the \emph{modulo} parameter is fixed to $M$=$2^{24}$=16777216.\\
The \emph{multiply} parameter, which defines the sequence, is chosen among numbers that garanties a period larger than $10^{15}$. \\
The last two parameters, \emph{initial x and carry} are drawn at random, using the Delphi \textsf{random} function. \\

The multithreaded sections of the codes which require random draws are such that each thread uses its own random generator (defined by its own \emph{multiply} parameter). This solution spares writing conflicts from different threads since each call to a random generator involves writing new values of its $x$ and $carry$ parameters. 
The current version of DIYABC contains 10,000 possible values for this \emph{multiply} parameter (over the 43,701 possible). Since the number of threads is set equal to the number of cores, that should be enough for the moment.\\

\textbf{Important note for users of the cluster version}\\
Concerning the program \texttt{diyabc\_sim}, the Delphi \textsf{random} function has been replaced by reading bytes from the \texttt{/dev/random} file. However, when several jobs are sent to the same computer, the latter being multicore, there is a risk that these jobs read the same bytes and hence that they draw the same sequence of random numbers. To avoid this situation, the program uses the second parameter which is different among jobs to define the \emph{multiply} parameter of the sequence. Consequently, if the cluster contains multicore computers, it is strongly advised to use successive integers as second parameters for  \texttt{diyabc\_sim}. Furthermore, \texttt{diyabc\_sim} can use multiple threads. If one knows the number of cores of the computer on which the job will run, one can  add a fourth parameter equal to this core number. In that case, all cores will use the same \emph{multiply} parameter (defined by the second parameter if the latter is an integer), but different values of $x_0$ and $c_0$, because all the latter are now red sequentially from \texttt{/dev/random}.
 


  