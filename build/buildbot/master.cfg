# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("windows7","pass"), BuildSlave("macosx","pass"),BuildSlave("linux64","pass"),BuildSlave("linux32","pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/cbgp/diyabc.git',
        workdir='diyabc', branch='master',
        pollinterval=150))
c['change_source'].append(GitPoller(
        'git@cbgpcluster.supagro.inra.fr:ibdsim2.git',
        workdir='ibdsim', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'git@cbgpcluster.supagro.inra.fr:migraine.git',
        workdir='migraine', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
#c['schedulers'].append(SingleBranchScheduler(
#                            name="all",
#                            change_filter=filter.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            builderNames=["buildlin64"]))
c['schedulers'].append(ForceScheduler(
                            name="forceALL",
                            builderNames=["build_linux_rpm_32","build_linux_rpm_64","build_linux_deb_32","build_linux_deb_64","build_linux_zip_32","build_linux_zip_64","build_mac_app_dmg_32","build_win_zip_32","build_win_zip_64"]))
# -----------------  DIYABC schedulers --------------------------                                                       
c['schedulers'].append(ForceScheduler(
                            name="forcelinrpm32",
                            builderNames=["build_linux_rpm_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forcelinrpm64",
                            builderNames=["build_linux_rpm_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forcelindeb32",
                            builderNames=["build_linux_deb_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forcelindeb64",
                            builderNames=["build_linux_deb_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forcelin32",
                            builderNames=["build_linux_zip_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forcelin64",
                            builderNames=["build_linux_zip_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forcemac",
                            builderNames=["build_mac_app_dmg_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forcewin",
                            builderNames=["build_win_zip_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forcewin64",
                            builderNames=["build_win_zip_64"]))                            

# -----------------  ibdsim schedulers --------------------------
#c['schedulers'].append(ForceScheduler(
#                            name="forceibdsimlinrpm32",
#                            builderNames=["ibdsim_linux_rpm_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forceibdsimlinrpm64",
#                            builderNames=["ibdsim_linux_rpm_64"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forceibdsimlindeb32",
#                            builderNames=["ibdsim_linux_deb_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forceibdsimlindeb64",
#                            builderNames=["ibdsim_linux_deb_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forceibdsimlin32",
                            builderNames=["ibdsim_lin_zip_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forceibdsimlin64",
                            builderNames=["ibdsim_lin_zip_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forceibdsimmac",
                            builderNames=["ibdsim_mac_app_dmg_32"]))
c['schedulers'].append(ForceScheduler(
                            name="forceibdsimwin32",
                            builderNames=["ibdsim_win_zip_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forceibdsimwin64",
#                            builderNames=["ibdsim_win_zip_64"])) 
                            

# -----------------  MIGRAINE schedulers --------------------------
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainelinrpm32",
#                            builderNames=["build_migraine_linux_rpm_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainelinrpm64",
#                            builderNames=["build_migraine_linux_rpm_64"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainelindeb32",
#                            builderNames=["build_migraine_linux_deb_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainelindeb64",
#                            builderNames=["build_migraine_linux_deb_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forcemigrainelin32",
                            builderNames=["build_migraine_lin_zip_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainelin64",
#                            builderNames=["build_migraine_linux_zip_64"]))
c['schedulers'].append(ForceScheduler(
                            name="forcemigrainemac",
                            builderNames=["build_migraine_mac_app_dmg_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainewin32",
#                            builderNames=["build_migraine_win_zip_32"]))
#c['schedulers'].append(ForceScheduler(
#                            name="forcemigrainewin64",
#                            builderNames=["build_migraine_win_zip_64"]))                             

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload, FileDownload
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand

# lock pour gerer la concurrence entre windows et mac quand ils demandent au master de generer la doc
from buildbot import locks
doc_lock = locks.MasterLock("doclock")

#========================================================
# ------------------ DIYABC factories -------------------
#--------------------------------------------------------
factorylinrpm64 = BuildFactory()
factorylinrpm64.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
factorylinrpm64.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build/rpm/ ; ./rpmbuild_all.sh 64"]))
factorylinrpm64.addStep(DirectoryUpload(slavesrc="../source/build/rpm/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylinrpm64.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*64.rpm dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
scp ~/public_html/lastDiyabc/diyabc*noarch.rpm dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorylinrpm32 = BuildFactory()
factorylinrpm32.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
factorylinrpm32.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build/rpm/ ; ./rpmbuild-bin.sh 32 ; rm -rf lastDiyabc ; mkdir lastDiyabc ; mv *.rpm lastDiyabc/"]))
factorylinrpm32.addStep(DirectoryUpload(slavesrc="../source/build/rpm/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylinrpm32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*86.rpm dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorylindeb32 = BuildFactory()
factorylindeb32.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
factorylindeb32.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build/debian/ ; ./build_deb_bin_32_only.sh -m ../../../Makefile -v ../../gui/version.txt"]))
factorylindeb32.addStep(DirectoryUpload(slavesrc="../source/build/debian/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylindeb32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*86.deb dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorylindeb64 = BuildFactory()
factorylindeb64.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
factorylindeb64.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build/debian/ ; ./build_all.sh -a amd64"]))
factorylindeb64.addStep(DirectoryUpload(slavesrc="../source/build/debian/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylindeb64.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*64.deb dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
scp ~/public_html/lastDiyabc/diyabc*all.deb dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorylin32 = BuildFactory()
# check out the source
factorylin32.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
#factorylin.addStep(Git(repourl='/home/julien/vcs/git/diyabc.git', mode='copy'))
factorylin32.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-lin-x32_builder.sh"]))
#factorylin.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/python_interface/docs/project_builders ; pwd"]))
#factorylin.addStep(FileUpload(slavesrc="python_interface/docs/project_builders/diyabc.zip",masterdest="~/public_html/diylin64.zip"))
factorylin32.addStep(DirectoryUpload(slavesrc="../source/build/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylin32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*linux32.zip dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorylin64 = BuildFactory()
factorylin64.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
factorylin64.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-lin-x64_builder.sh"]))
factorylin64.addStep(DirectoryUpload(slavesrc="../source/build/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorylin64.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*linux64.zip dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
"""))

factorymac = BuildFactory()
# check out the source
factorymac.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
# generation de la doc sur le master
factorymac.addStep(MasterShellCommand(command="rm -rf diyabc/Notice-DIYABC-v2/Notice_DIYABC_principal2* ; cd diyabc/doc/ ; ./gen_html_doc.sh ; cd ../Notice-DIYABC-v2 ; rm -rf html html.zip ; mv Notice_DIYABC_principal2 html ; zip -r html.zip html"))
# envoi du dossier html zippe sur le slave
factorymac.addStep(ShellCommand(command=["/bin/sh","-c","rm -rf ../html.zip ; rm -rf ../html"]))
factorymac.addStep(FileDownload(mastersrc="diyabc/Notice-DIYABC-v2/html.zip", slavedest="../html.zip"))
# extraction du zip sur le slave
factorymac.addStep(ShellCommand(command=["/bin/sh","-c","cd .. ; unzip html.zip"]))
# generation...
factorymac.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-mac-i386_builder.sh"]))
factorymac.addStep(DirectoryUpload(slavesrc="../source/build/lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
#factorylin.addStep(FileUpload(slavesrc="python_interface/docs/project_builders/lastDiyabc/diyabc-2.0.dmg",masterdest="~/public_html/diy.dmg"))
factorymac.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc*mac.dmg dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
wget http://147.99.65.15/~julien/lastDiyabc/ -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/

"""))

factorywin = BuildFactory()
# check out the source
factorywin.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
## !! il faut que le dossier git/bin soit dans le path de windows
# generation de la doc sur le master
factorywin.addStep(MasterShellCommand(name="gendoc, zipdoc on master",command="rm -rf diyabc/Notice-DIYABC-v2/Notice_DIYABC_principal2* ; cd diyabc/doc/ ; ./gen_html_doc.sh ; cd ../Notice-DIYABC-v2 ; rm -rf html html.zip ; mv Notice_DIYABC_principal2 html ; zip -r html.zip html"))
# envoi du dossier html zippe sur le slave
factorywin.addStep(ShellCommand(command=["sh.exe","-c","rm -rf ../html.zip ; ls .. ; rm -rf ../html ; ls .."]))
factorywin.addStep(FileDownload(name="transfer zipped doc to slave",mastersrc="diyabc/Notice-DIYABC-v2/html.zip", slavedest="../html.zip"))
# extraction du zip sur le slave
factorywin.addStep(ShellCommand(command=["sh.exe","-c","cd .. ; /c/Program\ Files/7-Zip/7z.exe x html.zip"]))
# generation...
factorywin.addStep(ShellCommand(command=["sh.exe","-c","cd ../source/build ; ./package-win-i386_builder.sh"]))
factorywin.addStep(DirectoryUpload(slavesrc="..\\source\\build\\lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorywin.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc-2.0-win32.zip dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
wget http://147.99.65.15/~julien/lastDiyabc -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
"""))

##### win64
factorywin64 = BuildFactory()
# check out the source
factorywin64.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
# generation de la doc sur le master
factorywin64.addStep(MasterShellCommand(name="gendoc, zipdoc on master",command="rm -rf diyabc/Notice-DIYABC-v2/Notice_DIYABC_principal2* ; cd diyabc/doc/ ; ./gen_html_doc.sh ; cd ../Notice-DIYABC-v2 ; rm -rf html html.zip ; mv Notice_DIYABC_principal2 html ; zip -r html.zip html"))
# envoi du dossier html zippe sur le slave
factorywin64.addStep(ShellCommand(command=["sh.exe","-c","rm -rf ../html.zip ; ls .. ; rm -rf ../html ; ls .."]))
factorywin64.addStep(FileDownload(name="transfer zipped doc to slave",mastersrc="diyabc/Notice-DIYABC-v2/html.zip", slavedest="../html.zip"))
# extraction du zip sur le slave
factorywin64.addStep(ShellCommand(command=["sh.exe","-c","cd .. ; /c/Program\ Files/7-Zip/7z.exe x html.zip"]))
# generation...
factorywin64.addStep(ShellCommand(command=["sh.exe","-c","cd ../source/build ; ./package-win-x86_64_builder.sh"]))
factorywin64.addStep(DirectoryUpload(slavesrc="..\\source\\build\\lastDiyabc", masterdest="~/public_html/lastDiyabc",url="http://147.99.65.15/~julien/lastDiyabc/"))
factorywin64.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastDiyabc ;
scp ~/public_html/lastDiyabc/diyabc-2.0-win64.zip dehneg@www1.montpellier.inra.fr:/var/www/cbgp/diyabc/diyabc-2.0/last/
wget http://147.99.65.15/~julien/lastDiyabc -O - | grep -v julien | grep -v Apache | sed 's/>/>\n/g' | grep -v "<img" > /tmp/index.html ;
chmod 644 /tmp/index.html ;
scp /tmp/index.html dehneg@www1.montpellier.inra.fr:/var/www/CBGP/diyabc/diyabc-2.0/last/ ;
"""))


#========================================================
# ------------------ ibdsim factories -------------------
#--------------------------------------------------------
factoryibdsimlin32 = BuildFactory()
factoryibdsimlin32.addStep(Git(repourl='git@cbgpcluster.supagro.inra.fr:ibdsim2.git', mode='copy'))
factoryibdsimlin32.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-lin-x32_builder.sh"]))
factoryibdsimlin32.addStep(DirectoryUpload(slavesrc="../source/build/lastIbdsim", masterdest="~/public_html/lastIbdsim",url="http://147.99.65.15/~julien/lastIbdsim/"))
factoryibdsimlin32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastIbdsim
"""))

factoryibdsimlin64 = BuildFactory()
factoryibdsimlin64.addStep(Git(repourl='git@cbgpcluster.supagro.inra.fr:ibdsim2.git', mode='copy'))
factoryibdsimlin64.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-lin-x64_builder.sh"]))
factoryibdsimlin64.addStep(DirectoryUpload(slavesrc="../source/build/lastDiyabc", masterdest="~/public_html/lastIbdsim",url="http://147.99.65.15/~julien/lastIbdsim/"))
factoryibdsimlin64.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastIbdsim
"""))

factoryibdsimmac = BuildFactory()
factoryibdsimmac.addStep(Git(repourl='https://github.com/cbgp/diyabc.git', mode='copy'))
# generation de la doc sur le master
##factoryibdsimmac.addStep(MasterShellCommand(command="rm -rf diyabc/Notice-DIYABC-v2/Notice_DIYABC_principal2* ; cd diyabc/doc/ ; ./gen_html_doc.sh ; cd ../Notice-DIYABC-v2 ; rm -rf html html.zip ; mv Notice_DIYABC_principal2 html ; zip -r html.zip html"))
# envoi du dossier html zippe sur le slave
##factoryibdsimmac.addStep(ShellCommand(command=["/bin/sh","-c","rm -rf ../html.zip ; rm -rf ../html"]))
##factoryibdsimmac.addStep(FileDownload(mastersrc="diyabc/Notice-DIYABC-v2/html.zip", slavedest="../html.zip"))
# extraction du zip sur le slave
##factoryibdsimmac.addStep(ShellCommand(command=["/bin/sh","-c","cd .. ; unzip html.zip"]))
# generation...
factoryibdsimmac.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-mac-i386_builder.sh"]))
factoryibdsimmac.addStep(DirectoryUpload(slavesrc="../source/build/lastIbdsim", masterdest="~/public_html/lastIbdsim",url="http://147.99.65.15/~julien/lastIbdsim/"))
factoryibdsimmac.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastIbdsim
"""))


factoryibdsimwin32 = BuildFactory()
factoryibdsimwin32.addStep(Git(repourl='git@cbgpcluster.supagro.inra.fr:ibdsim2.git', mode='copy'))
factoryibdsimwin32.addStep(ShellCommand(command=["sh.exe","-c","cd ../source/build ; ./package-win-i386_builder.sh"]))
factoryibdsimwin32.addStep(DirectoryUpload(slavesrc="..\\source\\build\\lastIbdsim", masterdest="~/public_html/lastIbdsim",url="http://147.99.65.15/~julien/lastIbdsim/"))
factoryibdsimwin32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastIbdsim
"""))


#========================================================
# ------------------ migraine factories -----------------
#--------------------------------------------------------
factorymigrainelin32 = BuildFactory()
# check out the source
factorymigrainelin32.addStep(Git(repourl='git@cbgpcluster.supagro.inra.fr:migraine.git', mode='copy'))
#factorylin.addStep(Git(repourl='/home/julien/vcs/git/diyabc.git', mode='copy'))
factorymigrainelin32.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-lin-x32_builder.sh"]))
#factorylin.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/python_interface/docs/project_builders ; pwd"]))
#factorylin.addStep(FileUpload(slavesrc="python_interface/docs/project_builders/diyabc.zip",masterdest="~/public_html/diylin64.zip"))
factorymigrainelin32.addStep(DirectoryUpload(slavesrc="../source/build/lastMigraine", masterdest="~/public_html/lastMigraine",url="http://147.99.65.15/~julien/lastMigraine/"))
factorymigrainelin32.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastMigraine ;
"""))

factorymacmigraine = BuildFactory()
# check out the source
factorymacmigraine.addStep(Git(repourl='git@cbgpcluster.supagro.inra.fr:migraine.git', mode='copy'))
## generation de la doc sur le master
#factorymacmigraine.addStep(MasterShellCommand(command="rm -rf diyabc/Notice-DIYABC-v2/Notice_DIYABC_principal2* ; cd diyabc/doc/ ; ./gen_html_doc.sh ; cd ../Notice-DIYABC-v2 ; rm -rf html html.zip ; mv Notice_DIYABC_principal2 html ; zip -r html.zip html"))
## envoi du dossier html zippe sur le slave
#factorymacmigraine.addStep(ShellCommand(command=["/bin/sh","-c","rm -rf ../html.zip ; rm -rf ../html"]))
#factorymacmigraine.addStep(FileDownload(mastersrc="diyabc/Notice-DIYABC-v2/html.zip", slavedest="../html.zip"))
## extraction du zip sur le slave
#factorymacmigraine.addStep(ShellCommand(command=["/bin/sh","-c","cd .. ; unzip html.zip"]))
# generation...
factorymacmigraine.addStep(ShellCommand(command=["/bin/sh","-c","cd ../source/build ; ./package-mac-i386_builder.sh"]))
factorymacmigraine.addStep(DirectoryUpload(slavesrc="../source/build/lastMigraine", masterdest="~/public_html/lastMigraine",url="http://147.99.65.15/~julien/lastMigraine/"))
factorymacmigraine.addStep(MasterShellCommand(command="""
chmod -R 755 ~/public_html/lastMigraine ;
"""))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build_linux_rpm_32",
      slavenames=["linux32"],
      factory=factorylinrpm32))
c['builders'].append(
    BuilderConfig(name="build_linux_rpm_64",
      slavenames=["linux64"],
      factory=factorylinrpm64))
c['builders'].append(
    BuilderConfig(name="build_linux_deb_32",
      slavenames=["linux32"],
      factory=factorylindeb32))
c['builders'].append(
    BuilderConfig(name="build_linux_deb_64",
      slavenames=["linux64"],
      factory=factorylindeb64))
c['builders'].append(
    BuilderConfig(name="build_linux_zip_32",
      slavenames=["linux32"],
      factory=factorylin32))
c['builders'].append(
    BuilderConfig(name="build_linux_zip_64",
      slavenames=["linux64"],
      factory=factorylin64))
c['builders'].append(
    BuilderConfig(name="build_mac_app_dmg_32",
      slavenames=["macosx"],
      factory=factorymac,
      locks=[doc_lock.access('exclusive')]))
c['builders'].append(
    BuilderConfig(name="build_win_zip_32",
      slavenames=["windows7"],
      factory=factorywin,
      locks=[doc_lock.access('exclusive')]))
c['builders'].append(
    BuilderConfig(name="build_win_zip_64",
      slavenames=["windows7"],
      factory=factorywin64,
      locks=[doc_lock.access('exclusive')]))  
# --------- ibdsim -------------------------          
c['builders'].append(
    BuilderConfig(name="ibdsim_lin_zip_32",
      slavenames=["linux32"],
      factory=factoryibdsimlin32))
c['builders'].append(
    BuilderConfig(name="ibdsim_lin_zip_64",
      slavenames=["linux64"],
      factory=factoryibdsimlin64))
c['builders'].append(
    BuilderConfig(name="ibdsim_mac_app_dmg_32",
      slavenames=["macosx"],
      factory=factoryibdsimmac,
      locks=[doc_lock.access('exclusive')]))      
c['builders'].append(
    BuilderConfig(name="ibdsim_win_zip_32",
      slavenames=["windows7"],
      factory=factoryibdsimwin32))
# --------- migraine -----------------------
c['builders'].append(
    BuilderConfig(name="build_migraine_lin_zip_32",
      slavenames=["linux32"],
      factory=factorymigrainelin32))
c['builders'].append(
    BuilderConfig(name="build_migraine_mac_app_dmg_32",
      slavenames=["macosx"],
      factory=factorymacmigraine))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("diyabc","diyabc")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "CBGP"
c['titleURL'] = "www1.montpellier.inra.fr/CBGP/diyabc/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://147.99.65.15:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
